
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> png(file="mif-%02d.png",res=100)
> 
> set.seed(64857673L)
> options(digits=3)
> 
> obs(window(ou2,end=20,start=15))
        time
variable   15    16     17    18    19    20
      y1  8.6   2.2  -1.13 -2.56 -4.92 -4.34
      y2 -4.9 -10.3 -10.36 -8.17 -7.22 -2.31
> obs(window(ou2,end=5),"y1")
        time
variable    1     2    3    4    5
      y1 -1.7 0.242 3.77 5.69 3.77
> 
> fit1.pfilter <- pfilter(ou2,Np=1000)
> cat("coefficients at `truth'\n")
coefficients at `truth'
> print(coef(ou2,c('x1.0','x2.0','alpha.2','alpha.3')),digits=4)
   x1.0    x2.0 alpha.2 alpha.3 
   -3.0     4.0    -0.5     0.3 
> cat("particle filter log likelihood at truth\n")
particle filter log likelihood at truth
> print(fit1.pfilter$loglik,digits=4)
[1] -481.6
> 
> p.truth <- coef(ou2)
> guess2 <- guess1 <- p.truth
> guess1[c('x1.0','x2.0','alpha.2','alpha.3')] <- 0.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> guess2[c('x1.0','x2.0','alpha.2','alpha.3')] <- 1.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> 
> mif1 <- mif(ou2,Nmif=25,start=guess1,
+             ivps=c('x1.0','x2.0'),
+             rw.sd=c(
+               x1.0=5,x2.0=5,
+               alpha.2=0.1,alpha.3=0.1
+               ),
+             Np=1000,
+             var.factor=1,
+             ic.lag=10,
+             cooling.type="hyperbolic",
+             cooling.fraction=0.95^50,
+             max.fail=100
+             )
> mif1 <- continue(mif1,Nmif=5,cooling.type="hyperbolic",
+                  cooling.fraction=1)
> 
> capture.output(
+     mif2 <- mif(ou2,Nmif=30,start=guess2,
+                 ivps=c('x1.0','x2.0'),
+                 transform=TRUE,
+                 verbose=TRUE,
+                 rw.sd=c(
+                     x1.0=5,x2.0=5,
+                     alpha.2=0.1,alpha.3=0.1
+                 ),
+                 Np=1000,
+                 var.factor=1,
+                 ic.lag=10,
+                 cooling.type="geometric",
+                 cooling.fraction=0.95^50,
+                 max.fail=100
+                 )
+     ) -> out
> stopifnot(length(out)==630)
> stopifnot(sum(grepl("pfilter timestep",out))==600)
> stopifnot(sum(grepl("mif iteration",out))==30)
> 
> plot(mif1)
> plot(mif12 <- c(mif1,mif2))
> mif12 <- c(mif12)
> mif1a <- c(mif1)
> coef(mif2)
alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3     tau    x1.0    x2.0 
  0.800  -0.469   0.364   0.900   3.000  -0.500   2.000   1.000  -4.268   2.497 
> dim(coef(mif12))
[1]  2 10
> dim(coef(c(mif12,mif2)))
[1]  3 10
> dim(coef(c(mif1,mif12)))
[1]  3 10
> dim(coef(c(mif1a,mif12)))
[1]  3 10
> dim(coef(mif12[2]))
[1]  1 10
> dim(conv.rec(mif12))
NULL
> 
> set.seed(33848585L)
> 
> try(
+     mif(
+         ou2,
+         Nmif=1,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0.1,alpha.4=0.2,alpha.3=0),
+         Np=100,ic.lag=10,var.factor=1
+         )
+     )
Error : in ‘mif’: ‘cooling.fraction.50’ must be specified
> 
> try(
+     mif(
+         ou2,
+         Nmif=1,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=-10,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : in ‘mif’: number of particles, ‘Np’, must always be positive
> 
> try(
+     mif(
+         ou2,
+         Nmif=-3,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11.6,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : in ‘mif’: ‘Nmif’ must be a positive integer
> 
> try(
+     mif(
+         ou2,
+         Nmif=2,
+         start=c(alpha.1=0.9,alpha.2=0,alpha.3=0,alpha.4=-Inf,sigma.1=1,sigma.2=0,sigma.3=2,tau=1,x1.0=50,x2.0=-50),
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : in ‘mif’: ‘mif’ cannot estimate non-finite parameters.
The following parameters are non-finite: ‘alpha.4’
> 
> try(
+     mif(
+         ou2,
+         Nmif=2,
+         start=c(alpha.1=0.9,alpha.2=0,alpha.3=0,alpha.4=0.99,sigma.1=1,sigma.2=0,sigma.3=2,tau=1,x1.0=50,x2.0=NaN),
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : in ‘mif’: ‘mif’ cannot estimate non-finite parameters.
The following parameters are non-finite: ‘x2.0’
> 
> fit <- mif(
+            ou2,
+            Nmif=0,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2,alpha.3=0),
+            Np=100,cooling.type="geometric",cooling.fraction=0.95^50,
+            ic.lag=10,var.factor=1
+            )
> fit <- mif(
+            fit,
+            Nmif=2,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2),
+            Np=function(k)if(k<10) 2000 else 500,
+            cooling.type="geometric",cooling.fraction=0.95^50,
+            ic.lag=10,var.factor=1
+            )
> try(continue(fit,Np=function(k)if(k<10) c(20,30) else 500))
Error : in ‘mif’: if ‘Np’ is a function, it must return a single positive integer
> 
> fit <- continue(fit)
> fit <- continue(fit,Nmif=2)
> capture.output(
+     ff <- pfilter(fit,pred.mean=T,filter.mean=T,pred.var=T,max.fail=100,verbose=TRUE)) -> out
> stopifnot(length(out)==20)
> stopifnot(sum(grepl("pfilter timestep",out))==20)
> ff <- pfilter(ff)
> fit <- mif(fit,rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.1))
> fit <- continue(fit,Nmif=2,ivps=c("x1.0"))
> s <- coef(fit)
> s[2] <- 0.01
> fit <- mif(fit,Nmif=3,start=s)
> fit <- mif(ou2,Nmif=3,rw.sd=c(alpha.2=0.1,alpha.3=0.1),Np=1000,cooling.type="geometric",cooling.fraction=0.98^50,var.factor=1,ic.lag=2)
> fit <- continue(fit,Nmif=2,Np=2000)
> fit <- continue(fit,ivps=c("x1.0"),rw.sd=c(alpha.2=0.1,alpha.3=0.1,x1.0=5,x2.0=5),Nmif=2)
> ff <- pfilter(fit)
> fit <- mif(
+            ff,
+            Nmif=2,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2),
+            cooling.fraction=0.95^50,ic.lag=10,var.factor=1
+            )
> try(mif(fit,Nmif=2,method="mif2"))
Error : in ‘mif’: method=‘mif2’ has been removed.
Use ‘mif2’ instead.
> fit <- continue(fit,Nmif=1,ic.lag=10000)
Warning message:
in ‘mif’: ‘ic.lag’ = 10000 > 100 = length(time(‘object’)) is nonsensical.  Setting ‘ic.lag’ = 100. 
> fit <- continue(fit,Nmif=1,ic.lag=2,rw.sd=c(x1.0=5,x2.0=5))
Warning message:
in ‘mif’: only IVPs are to be estimated, yet ‘ic.lag’ = 2 < 100 = length(time(‘object’)), so unnecessary work is to be done. 
> fit <- continue(fit,Nmif=3,ic.lag=100,method="unweighted")
> try(mif(ff,Nmif=2,ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2),
+         cooling.fraction=0.95^50,var.factor=1))
Error : in ‘mif’: ‘ic.lag’ must be specified if ‘ivps’ are.
> coef(fit,"alpha.4") <- 0
> try(fit <- continue(fit,Np=2,Nmif=3,max.fail=1))
Error : in ‘mif’: in ‘mif.pfilter’: too many filtering failures.
> coef(fit,"tau") <- NaN
> try(fit <- continue(fit,Np=100,Nmif=2))
Non-finite likelihood computed:
likelihood, data, states, and parameters are:
    lik      y1      y2      x1      x2 alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 
    NaN  -1.701   4.247  -2.756   1.245   0.800  -0.501   0.439   0.000   3.000 
sigma.2 sigma.3     tau    x1.0    x2.0 
 -0.500   2.000     NaN  -4.014   1.381 
Error : in ‘mif’: in ‘mif.pfilter’: ‘dmeasure’ returns non-finite value.
In addition: Warning message:
In rnorm(n = Np * length(center), mean = center, sd = sd) : NAs produced
> coef(fit,"alpha.2") <- -Inf
> try(fit <- continue(fit,Np=100,Nmif=2))
Non-finite likelihood computed:
likelihood, data, states, and parameters are:
    lik      y1      y2      x1      x2 alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 
    NaN  -1.701   4.247  -6.277     Inf   0.800    -Inf   0.439   0.000   3.000 
sigma.2 sigma.3     tau    x1.0    x2.0 
 -0.500   2.000     NaN  -3.580  -2.138 
Error : in ‘mif’: in ‘mif.pfilter’: ‘dmeasure’ returns non-finite value.
In addition: Warning message:
In rnorm(n = Np * length(center), mean = center, sd = sd) : NAs produced
> 
> pompExample(gompertz)
newly created object(s):
 gompertz 
> 
> coef(gompertz,"K") <- -1
> try(mif(gompertz,Np=1000,rw.sd=c(K=0.1,r=0.1),cooling.fraction.50=0.5))
Error : in ‘mif’: in ‘mif.pfilter’: non-finite state variable(s): X
> try(mif(gompertz,Np=1000,rw.sd=rw.sd(K=0.1,r=0.1),cooling.fraction.50=0.5))
Error : in ‘mif’: ‘rw.sd’ must be a named numeric vector.
> 
> pomp(gompertz,
+      toEstimationScale=function (params,...){
+          params["r"] <- log(params["r"])
+          params
+      },
+      fromEstimationScale=function (params,...){
+          params["r"] <- exp(params["r"])
+          params
+      }) -> po
> 
> try(mif(po,Nmif=3,Np=1000,rw.sd=c(K=5,r=5),cooling.fraction.50=0.5))
Error : in ‘mif’: in ‘mif.pfilter’: non-finite state variable(s): X
> try(mif(po,Nmif=3,Np=1000,rw.sd=c(K=5,r=Inf),cooling.fraction.50=0.5))
Error : in ‘mif’: in ‘mif.pfilter’: non-finite parameter(s): r
In addition: Warning message:
In rnorm(n = Np * length(center), mean = center, sd = sd) : NAs produced
> 
> coef(gompertz,"K") <- 10
> try(gb <- mif(gompertz,Nmif=1,Np=1,rw.sd=c(K=0.1,r=0.1),
+               cooling.fraction.50=0.2,transform=TRUE))
Warning message:
in ‘mif.pfilter’: 97 filtering failures occurred. 
> 
> dev.off()
null device 
          1 
> 
