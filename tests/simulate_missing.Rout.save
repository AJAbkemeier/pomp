
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="simulate_missing-%02d.png",res=100)
> 
> library(pomp)
> library(magrittr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> set.seed(1041414791L)
> 
> try(simulate(rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: ‘times’ is a required argument.
> try(simulate(times=1:10,
+   rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: ‘t0’ is a required argument.
> try(simulate(times=c(1:5,NA,7:10),t0=0,
+   rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: in ‘pomp’: ‘times’ must be specified as an increasing sequence of numbers.
> try(simulate(times=NULL,t0=0,
+   rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: in ‘pomp’: ‘times’ must be specified as an increasing sequence of numbers.
> try(simulate(times=1:10,t0=NA,
+   rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: in ‘pomp’: ‘t0’ must be specified as a single number not greater than ‘times[1]’.
> try(simulate(times=1:10,t0=NULL,
+   rprocess=onestep.sim(Csnippet("z = runif(0,1);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: in ‘pomp’: ‘t0’ must be specified as a single number not greater than ‘times[1]’.
> 
> simulate(times=1:100,t0=0,seed=450738202,
+   rprocess=onestep.sim(Csnippet("z = runif(z-0.5,z+0.5);")),
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w") %>% plot()
> 
> try(simulate(times=1:100,t0=0,
+   rmeasure=Csnippet("w = rnorm(z,1);"),
+   rinit=Csnippet("z = 0;"),
+   statenames="z",obsnames="w"))
Error : in ‘simulate’: 'rprocess' is undefined.
> 
> simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),
+   rmeasure=function(x,t,params,...) {
+     z <- x["z"]
+     c(w = rnorm(1,z,1))
+   },params=c(z.0=0))
<object of class ‘pomp’>
> 
> try(simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),params=c(z.0=0)))
Error : in ‘simulate’: operation cannot be completed: rmeasure has not been specified
> 
> simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),params=c(z.0=0),.states=TRUE) %>%
+   str()
 num [1, 1, 1:100] -0.06025 -0.00142 -0.08048 -0.15307 0.10254 ...
 - attr(*, "dimnames")=List of 3
  ..$ variable: chr "z"
  ..$ rep     : NULL
  ..$ time    : NULL
> 
> try(simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),params=c(z.0=0),.obs=TRUE))
Error : in ‘simulate’: operation cannot be completed: rmeasure has not been specified
> 
> simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),
+   rmeasure=function(x,t,params,...) {
+     z <- x["z"]
+     c(w = rnorm(1,z,1))
+   },
+   params=c(z.0=0),.obs=TRUE) %>%
+   str()
 num [1, 1, 1:100] 0.8794 0.2775 0.0428 -1.018 0.4496 ...
 - attr(*, "dimnames")=List of 3
  ..$ variable: chr "w"
  ..$ rep     : NULL
  ..$ time    : NULL
> 
> simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...) {
+     z <- x["z"]
+     c(z=runif(1,z-0.5,z+0.5))
+   }),
+   rmeasure=function(x,t,params,...) {
+     z <- x["z"]
+     c(w = rnorm(1,z,1))
+   },
+   params=c(z.0=0),.states=TRUE,.obs=TRUE) %>%
+   str()
List of 2
 $ states: num [1, 1, 1:100] 0.0212 0.2814 0.3127 -0.1149 -0.3917 ...
  ..- attr(*, "dimnames")=List of 3
  .. ..$ variable: chr "z"
  .. ..$ rep     : NULL
  .. ..$ time    : NULL
 $ obs   : num [1, 1, 1:100] 1.613 -0.899 0.662 -1.267 -2.096 ...
  ..- attr(*, "dimnames")=List of 3
  .. ..$ variable: chr "w"
  .. ..$ rep     : NULL
  .. ..$ time    : NULL
> 
> try(simulate(times=1:100,t0=0,
+   rprocess=onestep.sim(Csnippet("z = runif(z-0.5,z+0.5);")),
+   rmeasure=function(t,x,params,...) c(w=rnorm(n=t,x["z"],1)),
+   rinit=Csnippet("z = 2;"),
+   statenames="z"))
Error : in ‘simulate’: 'rmeasure' returns variable-length results.
> 
> simulate(times=1:100,t0=0,seed=993523767,
+   rprocess=onestep.sim(Csnippet("z = runif(z-0.5,z+0.5);")),
+   rmeasure=function(t,x,params,...) c(w=rnorm(1,x["z"],1)),
+   rinit=Csnippet("z = 0;"),
+   statenames="z") %>% plot()
> 
> simulate(times=1:100,t0=0,seed=378047885,
+   rprocess=onestep.sim(function(x,t,params,delta.t,...)
+     c(z=runif(n=1,x["z"]-0.5,x["z"]+0.5))),
+   rmeasure=function(t,x,params,...) c(w=rnorm(1,x["z"],1)),
+   rinit=function(params,t0,...)c(z=0)) %>% plot()
> 
> dev.off()
null device 
          1 
> 
