
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> capture.output({
+ 
+     library(pomp)
+ 
+     options(digits=3,verbose=TRUE,keep.source=TRUE)
+ 
+     set.seed(398585L)
+     pompExample(ou2)
+ 
+     time(ou2) <- 1:20
+ 
+     Np <- 100
+ 
+     prior.bounds <- rbind(
+         alpha.2=c(-0.55,-0.45),
+         alpha.3=c(0.25,0.35)
+     )
+ 
+     pomp(ou2,
+          rprior=function(params,...) {
+              params[c("alpha.2","alpha.3")] <-
+                  runif(n=1,min=prior.bounds[,1],max=prior.bounds[,2])
+              params
+          },
+          dprior=function(params,log,...) {
+              f <- sum(dunif(params,min=coef(ou2)-1,max=coef(ou2)+1,log=TRUE))
+              if (log) f else exp(f)
+          }
+          ) -> ou2
+ 
+     f1 <- bsmc(ou2,est="alpha.2",Np=100,smooth=0.02)
+     try(bsmc(ou2,est="alpha.2",Np=2,smooth=0.02))
+     f1 <- bsmc2(ou2,est="alpha.2",Np=100,smooth=0.02)
+     try(bsmc(ou2,est=c("alpha.1","alpha.2"),Np=1,smooth=0.02))
+     try(bsmc2(ou2,est="alpha.2",Np=1,smooth=0.02))
+     try(bsmc2(ou2,est="alpha.2",Np=2,smooth=0.02))
+     f1 <- ou2
+     f1@data[,c(3,20)] <- c(10000,10000)
+     try(f1 <- bsmc2(f1,est=c("alpha.2","alpha.4"),Np=100,smooth=0.01,max.fail=3))
+     prop <- mvn.diag.rw(c(alpha.2=0.001,alpha.3=0.001))
+     f2 <- pmcmc(ou2,Nmcmc=20,proposal=prop,Np=100)
+     f3 <- ou2
+     f3@data[,20] <- c(1000,1000)
+     timezero(f3) <- 1
+     f3 <- pfilter(f3,Np=10,filter.traj=TRUE)
+     f3 <- pfilter(ou2,Np=100)
+     f4 <- mif(f3,Nmif=10,rw.sd=c(alpha.2=0.01,alpha.3=0.01),cooling.fraction.50=0.1)
+     f5 <- mif2(f3,Nmif=10,rw.sd=rw.sd(alpha.2=0.01,alpha.3=0.01),
+                cooling.fraction.50=0.1)
+     plist <- list(
+         y1.mean=probe.mean(var="y1"),
+         y2.mean=probe.mean(var="y2"),
+         probe.acf(var="y1",lags=c(0,5)),
+         probe.acf(var="y2",lags=c(0,5)),
+         probe.ccf(vars=c("y1","y2"),lags=0)
+     )
+     f6 <- probe(ou2,probes=plist,nsim=200)
+     f7 <- probe.match(f6,est=c("alpha.2","alpha.3"))
+     f8 <- abc(f7,Nabc=20,est=c("alpha.2","alpha.3"),
+               proposal=prop,scale=1,epsilon=20)
+     f9 <- nlf(ou2,lags=c(1,2),est=c("alpha.2","alpha.3","tau"),
+               nconverge=100,nasymp=2000,lql.frac=0.025,
+               seed=426094906L,maxit=200,method="Nelder-Mead")
+     f10 <- traj.match(f9,est=c("alpha.2","alpha.3","tau"))
+ 
+     pompExample(ricker)
+     try(pomp(ricker,rmeasure=Csnippet("y=rpois(N)"),statenames="N") -> po)
+ }) -> out
filtering failure at time t = 12
Error : in 'bsmc': too many filtering failures
In addition: Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
Error : in 'bsmc': in 'rmvnorm': infinite or missing values in 'x'
Error : in 'bsmc2': in 'rmvnorm': infinite or missing values in 'x'
filtering failure at time t = 4
Error : in 'bsmc2': too many filtering failures
filtering failure at time t = 3
filtering failure at time t = 20
filtering failure at time t = 20
Error : in 'pomp': error in building shared-object library from C snippets: in 'pompCBuilder': compilation error: cannot compile shared-object library '/tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.so': status = 1
compiler messages:
make[2]: Entering directory `/home/kingaa/projects/Rpkg/pomp/tests'
gcc -std=gnu99 -I"/usr/local/apps/R/R-3.5.1/lib64/R/include" -DNDEBUG -I/home/kingaa/projects/Rpkg/library/pomp/include -I/home/kingaa/projects/Rpkg/pomp/tests  -I/usr/local/include   -fpic  -g -O2 -Wall -pedantic -c /tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.c -o /tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.o
/tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.c: In function ‘__pomp_rmeasure’:
/tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.c:18:1: error: expected ‘;’ before ‘}’ token
 }
 ^
make[2]: *** [/tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.o] Error 1
make[2]: Leaving directory `/home/kingaa/projects/Rpkg/pomp/tests'
make[2]: Entering directory `/home/kingaa/projects/Rpkg/pomp/tests'
make[2]: Leaving directory `/home/kingaa/projects/Rpkg/pomp/tests'
In addition: Warning messages:
1: in 'bsmc2': 2 filtering failures occurred. 
2: in 'pfilter': 1 filtering failure occurred. 
3: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
4: In library(pomp) : package 'pomp' already present in search()
5: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
6: In system2(command = R.home("bin/R"), args = c("CMD", "SHLIB", "-c",  :
  running command 'PKG_CPPFLAGS="-I/home/kingaa/projects/Rpkg/library/pomp/include -I/home/kingaa/projects/Rpkg/pomp/tests" '/usr/local/apps/R/R-3.5.1/lib64/R/bin/R' CMD SHLIB -c -o /tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.so /tmp/RtmpCKiQis/456/pomp_e90cc83f8bc44745f5badb32eb4840b9.c 2>&1' had status 1
> length(out)
[1] 675
> stopifnot(sum(grepl("mif2 pfilter",out))==40)
> stopifnot(sum(grepl("model codes written",out))==1)
> stopifnot(sum(grepl("fitted param",out))==6)
> stopifnot(sum(grepl("ABC iteration",out))==5)
> stopifnot(sum(grepl("acceptance ratio:",out))==24)
> stopifnot(sum(grepl("pfilter timestep",out))==88)
> stopifnot(sum(grepl("mif iteration",out))==10)
> stopifnot(sum(grepl("prior.mean",out))==78)
> stopifnot(sum(grepl("effective sample size",out))==74)
> stopifnot(sum(grepl("mif2 iteration",out))==10)
> stopifnot(sum(grepl("h in",out))==1)
> 
> invisible(capture.output(pompExample(ricker)))
Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
> capture.output(simulate(pomp(ricker,rmeasure=Csnippet("y=rpois(N);"),statenames="N",
+   cfile="bob",verbose=TRUE),verbose=TRUE) -> po) -> out
Warning message:
In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> gsub("(\\w+)\\s.+","\\1",out,perl=TRUE)
 [1] "model"             "compiling"         "compiler"         
 [4] "make[2]: Entering" "gcc"               "gcc"              
 [7] "make[2]: Leaving"  "make[2]: Entering" "make[2]: Leaving" 
[10] "loading"           "unloading"        
> 
> set.seed(3949586L)
> capture.output(invisible(mif2(window(ricker,end=10),Nmif=1,Np=1,rw.sd=rw.sd(r=1),
+   transform=TRUE,cooling.fraction.50=1,verbose=TRUE)),
+   type="message") -> out
mif2 pfilter timestep 5 of 11 finished
mif2 pfilter timestep 10 of 11 finished
mif2 iteration 1 of 1 completed
Warning message:
in 'mif2.pfilter': 5 filtering failures occurred. 
> stopifnot(sum(grepl("filtering failure at time",out))==5)
> 
> set.seed(3949586L)
> capture.output(invisible(mif(window(ricker,end=10),Nmif=1,Np=1,rw.sd=c(r=1),
+                              transform=TRUE,cooling.fraction.50=1,verbose=TRUE)),
+                type="message") -> out
pfilter timestep 5 of 11 finished
pfilter timestep 10 of 11 finished
mif iteration 1 of 1 completed
Warning message:
in 'mif.pfilter': 5 filtering failures occurred. 
> stopifnot(sum(grepl("filtering failure at time",out))==5)
> 
> spy(ricker)
no C snippets to display
> capture.output(pompExample(dacca)) -> out
Warning messages:
1: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
2: In library(pomp) : package 'pomp' already present in search()
3: In find.package(package, lib.loc, quiet = TRUE) :
  package 'pomp' found more than once, using the first from
  "/home/kingaa/projects/Rpkg/library/pomp",
  "/home/kingaa/R/x86_64-pc-linux-gnu-library/3.5/pomp"
> spy(dacca)
/* pomp C snippet file: pomp_0a42e1c77749ee6a5c2b4649b6811d71 */
/* Time: 2018-07-14 12:04:59.459 -0400 */
/* Salt: EE444509B5E4E6D45828ABC6 */

#include <pomp.h>
#include <R_ext/Rdynload.h>

int nrstage = 3, nbasis = 6; 

#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define S	(__x[__stateindex[0]])
#define I	(__x[__stateindex[1]])
#define Y	(__x[__stateindex[2]])
#define R1	(__x[__stateindex[3]])
#define R2	(__x[__stateindex[4]])
#define R3	(__x[__stateindex[5]])
#define deaths	(__x[__stateindex[6]])
#define W	(__x[__stateindex[7]])
#define count	(__x[__stateindex[8]])


 
void __pomp_stepfn (double *__x, const double *__p, const int *__stateindex, const int *__parindex, const int *__covindex, int __covdim, const double *__covars, double t, double dt)
{
 
  double births;
  double infections;
  double sdeaths;
  double ideaths;
  double ydeaths;
  double rdeaths[nrstage];
  double disease;
  double wanings;
  double passages[nrstage+1];
  double effI;
  double neps;
  double beta;
  double omega;
  double dw;
  double *pt;
  int j;

  if (count != 0.0) return;

  neps = eps*nrstage;

  beta = exp(dot_product(nbasis,&seas1,&logbeta1)+beta_trend*trend);
  omega = exp(dot_product(nbasis,&seas1,&logomega1));

  dw = rnorm(0,sqrt(dt));	// white noise

  effI = pow(I/pop,alpha);
  births = dpopdt + delta*pop;	// births

  passages[0] = gamma*I;	// recovery
  ideaths = delta*I;	        // natural i deaths
  disease = deltaI*I;	        // disease death
  ydeaths = delta*Y;     	// natural rs deaths
  wanings = rho*Y;		// loss of immunity

  for (pt = &R1, j = 0; j < nrstage; j++, pt++) {
    rdeaths[j] = *pt*delta;	// natural R deaths
    passages[j+1] = *pt*neps;	// passage to the next immunity class
  }

  infections = (omega+(beta+sd_beta*dw/dt)*effI)*S; // infection
  sdeaths = delta*S;	        // natural S deaths

  S += (births - infections - sdeaths + passages[nrstage] + wanings)*dt;
  I += (clin*infections - disease - ideaths - passages[0])*dt;
  Y += ((1-clin)*infections - ydeaths - wanings)*dt;
  for (pt = &R1, j = 0; j < nrstage; j++, pt++) 
    *pt += (passages[j] - passages[j+1] - rdeaths[j])*dt;
  deaths += disease*dt;		// cumulative deaths due to disease
  W += dw;

  // check for violations of positivity constraints
  // nonzero 'count' variable signals violation
  if (S < 0.0) {
    S = 0.0; I = 0.0; Y = 0.0; 
    count += 1; 
  }
  if (I < 0.0) {
    I = 0.0; S = 0.0; 
    count += 1e3; 
  }
  if (Y < 0.0) { 
    Y = 0.0; S = 0.0; 
    count += 1e6; 
  }
  if (deaths < 0.0) { 
    deaths = 0.0; 
    count += 1e9; 
  }
  for (pt = &R1, j = 0; j < nrstage-1; j++, pt++) {
    if (*pt < 0.0) {
      *pt = 0.0; *(pt+1) = 0.0;
      count += 1e12; 
    }
  }
  if (*pt < 0.0) {
    *pt = 0.0; S = 0.0;
    count += 1e12;
  }
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count
#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define S	(__x[__stateindex[0]])
#define I	(__x[__stateindex[1]])
#define Y	(__x[__stateindex[2]])
#define R1	(__x[__stateindex[3]])
#define R2	(__x[__stateindex[4]])
#define R3	(__x[__stateindex[5]])
#define deaths	(__x[__stateindex[6]])
#define W	(__x[__stateindex[7]])
#define count	(__x[__stateindex[8]])
#define cholera_deaths	(__y[__obsindex[0]])


 
void __pomp_rmeasure (double *__y, const double *__x, const double *__p, const int *__obsindex, const int *__stateindex, const int *__parindex, const int *__covindex, int __ncovars, const double *__covars, double t)
{
 
  double v, tol = 1.0e-18;
  v = deaths*tau;
  if ((count > 0) || (!(R_FINITE(v)))) {
    cholera_deaths = R_NaReal;
  } else {
    cholera_deaths = rnorm(deaths,v+tol);
  }
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count
#undef cholera_deaths
#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define S	(__x[__stateindex[0]])
#define I	(__x[__stateindex[1]])
#define Y	(__x[__stateindex[2]])
#define R1	(__x[__stateindex[3]])
#define R2	(__x[__stateindex[4]])
#define R3	(__x[__stateindex[5]])
#define deaths	(__x[__stateindex[6]])
#define W	(__x[__stateindex[7]])
#define count	(__x[__stateindex[8]])
#define cholera_deaths	(__y[__obsindex[0]])
#define lik	(__lik[0])


 
void __pomp_dmeasure (double *__lik, const double *__y, const double *__x, const double *__p, int give_log, const int *__obsindex, const int *__stateindex, const int *__parindex, const int *__covindex, int __ncovars, const double *__covars, double t)
{
 
  double v, tol = 1.0e-18;
  v = deaths*tau;
  if ((count>0.0) || (!(R_FINITE(v)))) {
    lik = tol;
  } else {
    lik = dnorm(cholera_deaths,deaths,v+tol,0)+tol;
  }
  if (give_log) lik = log(lik);
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count
#undef cholera_deaths
#undef lik
#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define Ttau	(__pt[__parindex[0]])
#define Tgamma	(__pt[__parindex[1]])
#define Teps	(__pt[__parindex[2]])
#define Tdelta	(__pt[__parindex[3]])
#define TdeltaI	(__pt[__parindex[4]])
#define Tlogomega1	(__pt[__parindex[5]])
#define Tsd_beta	(__pt[__parindex[6]])
#define Tbeta_trend	(__pt[__parindex[7]])
#define Tlogbeta1	(__pt[__parindex[8]])
#define Talpha	(__pt[__parindex[9]])
#define Trho	(__pt[__parindex[10]])
#define Tclin	(__pt[__parindex[11]])
#define TS_0	(__pt[__parindex[12]])
#define TI_0	(__pt[__parindex[13]])
#define TY_0	(__pt[__parindex[14]])
#define TR1_0	(__pt[__parindex[15]])


 
void __pomp_from_trans (double *__pt, const double *__p, const int *__parindex)
{
 
  Ttau = exp(tau);
  Tgamma = exp(gamma);
  Teps = exp(eps);
  Tdelta = exp(delta);
  TdeltaI = exp(deltaI);
  Tsd_beta = exp(sd_beta);
  Talpha = exp(alpha);
  Trho = exp(rho);
  Tclin = expit(clin);
  from_log_barycentric(&TS_0,&S_0,nrstage+3);
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef Ttau
#undef Tgamma
#undef Teps
#undef Tdelta
#undef TdeltaI
#undef Tlogomega1
#undef Tsd_beta
#undef Tbeta_trend
#undef Tlogbeta1
#undef Talpha
#undef Trho
#undef Tclin
#undef TS_0
#undef TI_0
#undef TY_0
#undef TR1_0
#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define Ttau	(__pt[__parindex[0]])
#define Tgamma	(__pt[__parindex[1]])
#define Teps	(__pt[__parindex[2]])
#define Tdelta	(__pt[__parindex[3]])
#define TdeltaI	(__pt[__parindex[4]])
#define Tlogomega1	(__pt[__parindex[5]])
#define Tsd_beta	(__pt[__parindex[6]])
#define Tbeta_trend	(__pt[__parindex[7]])
#define Tlogbeta1	(__pt[__parindex[8]])
#define Talpha	(__pt[__parindex[9]])
#define Trho	(__pt[__parindex[10]])
#define Tclin	(__pt[__parindex[11]])
#define TS_0	(__pt[__parindex[12]])
#define TI_0	(__pt[__parindex[13]])
#define TY_0	(__pt[__parindex[14]])
#define TR1_0	(__pt[__parindex[15]])


 
void __pomp_to_untrans (double *__pt, const double *__p, const int *__parindex)
{
 
  Ttau = log(tau);
  Tgamma = log(gamma);
  Teps = log(eps);
  Tdelta = log(delta);
  TdeltaI = log(deltaI);
  Tsd_beta = log(sd_beta);
  Talpha = log(alpha);
  Trho = log(rho);
  Tclin = logit(clin);
  to_log_barycentric(&TS_0,&S_0,nrstage+3);
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef Ttau
#undef Tgamma
#undef Teps
#undef Tdelta
#undef TdeltaI
#undef Tlogomega1
#undef Tsd_beta
#undef Tbeta_trend
#undef Tlogbeta1
#undef Talpha
#undef Trho
#undef Tclin
#undef TS_0
#undef TI_0
#undef TY_0
#undef TR1_0
#define seas1	(__covars[__covindex[0]])
#define seas2	(__covars[__covindex[1]])
#define seas3	(__covars[__covindex[2]])
#define seas4	(__covars[__covindex[3]])
#define seas5	(__covars[__covindex[4]])
#define seas6	(__covars[__covindex[5]])
#define pop	(__covars[__covindex[6]])
#define dpopdt	(__covars[__covindex[7]])
#define trend	(__covars[__covindex[8]])
#define tau	(__p[__parindex[0]])
#define gamma	(__p[__parindex[1]])
#define eps	(__p[__parindex[2]])
#define delta	(__p[__parindex[3]])
#define deltaI	(__p[__parindex[4]])
#define logomega1	(__p[__parindex[5]])
#define sd_beta	(__p[__parindex[6]])
#define beta_trend	(__p[__parindex[7]])
#define logbeta1	(__p[__parindex[8]])
#define alpha	(__p[__parindex[9]])
#define rho	(__p[__parindex[10]])
#define clin	(__p[__parindex[11]])
#define S_0	(__p[__parindex[12]])
#define I_0	(__p[__parindex[13]])
#define Y_0	(__p[__parindex[14]])
#define R1_0	(__p[__parindex[15]])
#define S	(__x[__stateindex[0]])
#define I	(__x[__stateindex[1]])
#define Y	(__x[__stateindex[2]])
#define R1	(__x[__stateindex[3]])
#define R2	(__x[__stateindex[4]])
#define R3	(__x[__stateindex[5]])
#define deaths	(__x[__stateindex[6]])
#define W	(__x[__stateindex[7]])
#define count	(__x[__stateindex[8]])


 
void __pomp_rinit (double *__x, const double *__p, double t, const int *__stateindex, const int *__parindex, const int *__covindex, const double *__covars)
{
 
  int k;
  double sum = S_0+I_0+Y_0;
  double *R = &R1;
  const double *R0 = &R1_0;
  for (k = 0; k < nrstage; k++) sum += R0[k];
  S = nearbyint(pop*S_0/sum);
  I = nearbyint(pop*I_0/sum);
  Y = nearbyint(pop*Y_0/sum);
  for (k = 0; k < nrstage; k++) R[k] = nearbyint(pop*R0[k]/sum);
  W = 0;
  deaths = 0;
  count = 0;
 
}

#undef seas1
#undef seas2
#undef seas3
#undef seas4
#undef seas5
#undef seas6
#undef pop
#undef dpopdt
#undef trend
#undef tau
#undef gamma
#undef eps
#undef delta
#undef deltaI
#undef logomega1
#undef sd_beta
#undef beta_trend
#undef logbeta1
#undef alpha
#undef rho
#undef clin
#undef S_0
#undef I_0
#undef Y_0
#undef R1_0
#undef S
#undef I
#undef Y
#undef R1
#undef R2
#undef R3
#undef deaths
#undef W
#undef count

static int __pomp_load_stack = 0;

void __pomp_load_stack_incr (void) {++__pomp_load_stack;}

void __pomp_load_stack_decr (int *val) {*val = --__pomp_load_stack;}

void R_init_pomp_0a42e1c77749ee6a5c2b4649b6811d71 (DllInfo *info)
{
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_load_stack_incr", (DL_FUNC) __pomp_load_stack_incr);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_load_stack_decr", (DL_FUNC) __pomp_load_stack_decr);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_stepfn", (DL_FUNC) __pomp_stepfn);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_rmeasure", (DL_FUNC) __pomp_rmeasure);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_dmeasure", (DL_FUNC) __pomp_dmeasure);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_from_trans", (DL_FUNC) __pomp_from_trans);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_to_untrans", (DL_FUNC) __pomp_to_untrans);
R_RegisterCCallable("pomp_0a42e1c77749ee6a5c2b4649b6811d71", "__pomp_rinit", (DL_FUNC) __pomp_rinit);
}

> 
