
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="pmcmc-%02d.png",res=100)
> 
> set.seed(857075216L)
> 
> library(pomp)
> library(magrittr)
> 
> pompExample(gompertz,envir=NULL) -> po
> 
> po <- window(po[[1]],end=10)
> 
> prop1 <- mvn.diag.rw(c(r=0.01,sigma=0.01))
> 
> mcmc1 <- pmcmc(po,Nmcmc=100,Np=100,dprior=Csnippet("
+     lik = dunif(r,0,1,1)+dnorm(sigma,0,1,1);
+     lik = (give_log) ? lik : exp(lik);"
+ ),
+   paramnames=c("r","sigma"),
+   proposal=prop1)
> 
> try(pmcmc(po,Nmcmc=100,Np=100))
Error : in 'pmcmc': 'proposal' must be specified
> 
> pf <- pfilter(po,Np=100)
> mcmc2 <- pmcmc(pf,Nmcmc=100,proposal=prop1)
> mcmc3 <- pmcmc(mcmc1,Nmcmc=50)
> mcmc3 <- continue(mcmc3,Nmcmc=50)
> 
> plot(c(mcmc1,mcmc2,mcmc3),pars=c("r","sigma"),density=FALSE)
> plot(c(mcmc1,c(mcmc2,mcmc3)),pars=c("r","sigma"),trace=FALSE)
> plot(conv.rec(c(c(mcmc1,mcmc2),mcmc3),c("r","sigma")))
> 
> invisible(pmcmc(mcmc1,start=as.list(coef(mcmc3))))
> try(pmcmc(mcmc1,start=NULL))
Error : in 'pmcmc': 'start' must be specified
> try(pmcmc(mcmc1,start=-7))
Error : in 'pmcmc': 'start' must be a named numeric vector
> try(pmcmc(mcmc1,start="yes"))
Error : in 'pmcmc': 'start' must be a named numeric vector
> try(pmcmc(mcmc1,start=list()))
Error : in 'pmcmc': 'start' must be specified
> try({tmp <- mcmc1; coef(tmp) <- NULL; pmcmc(tmp)})
Error : in 'pmcmc': 'start' must be specified
> try(pmcmc(mcmc1,proposal="random"))
Error : in 'pmcmc': 'proposal' must be a function
> try(pmcmc(mcmc1,proposal=NULL))
Error : in 'pmcmc': 'proposal' must be specified
> try(pmcmc(mcmc1,proposal=function(...)c(3,2)))
Error : in 'pmcmc': 'proposal' must return a named numeric vector
> try(pmcmc(mcmc1,proposal=function(...)c(a=3,b=2,X.0=1)))
Error : in 'pmcmc': in 'pfilter': process simulation error: variable 'r' not found among the parameters
> try(pmcmc(mcmc1,proposal=function(...)stop("oh no!")))
Error : in 'pmcmc': error in proposal function: oh no!
> try({
+   count <- 0
+   delayed.failure <- function (theta, ...) {
+     count <<- count+1
+     if (count>5) stop("no sir!") else theta
+   }
+   pmcmc(mcmc1,proposal=delayed.failure)})
Error : in 'pmcmc': error in proposal function: no sir!
> 
> try(pmcmc(mcmc1,Nmcmc=-20))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=NA))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=c(5,10,15)))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> 
> try(pmcmc(mcmc1,dprior=function(params,log,...)stop("not again!")))
Error : in 'pmcmc': 'dprior' error: not again!
> try({
+   count <- 0
+   delayed.failure <- function (params, log, ...) {
+     count <<- count+1
+     if (count>5) stop("uh huh") else 1
+   }
+   pmcmc(mcmc1,dprior=delayed.failure)})
Error : in 'pmcmc': 'dprior' error: uh huh
> 
> capture.output(invisible(pmcmc(mcmc1,Nmcmc=10,verbose=TRUE))) -> out
> stopifnot(sum(grepl("acceptance ratio",out))==10)
> stopifnot(sum(grepl("PMCMC iteration",out))==11)
> 
> dev.off()
null device 
          1 
> 
> list.files(pattern="pmcmc-\\d{2}.png") %>% {
+   set_names(.,.)
+ } %>%
+   lapply(function (x) readBin(x,what=raw(0),n=file.size(x))) %>%
+   sapply(digest::digest)
                      pmcmc-01.png                       pmcmc-02.png 
"e7a159aea6e863062608dfcfa0348af4" "d774596539710ca99f842c498da6a07f" 
                      pmcmc-03.png 
"5e672677bbe89d6339e1d53b597af138" 
> 
