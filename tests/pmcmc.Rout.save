
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="pmcmc-%02d.png",res=100)
> 
> set.seed(857075216L)
> 
> library(pomp)
> 
> pompExample(gompertz,envir=NULL) -> po
> 
> po <- window(po[[1]],end=10)
> 
> prop1 <- mvn.diag.rw(c(r=0.01,sigma=0.01))
> 
> mcmc1 <- pmcmc(po,Nmcmc=100,Np=100,dprior=Csnippet("
+     lik = dunif(r,0,1,1)+dnorm(sigma,0,1,1);
+     lik = (give_log) ? lik : exp(lik);"
+ ),
+   paramnames=c("r","sigma"),
+   proposal=prop1)
> 
> try(pmcmc(po,Nmcmc=100,Np=100))
Error : in 'pmcmc': 'proposal' must be specified
> 
> pf <- pfilter(po,Np=100)
> mcmc2 <- pmcmc(pf,Nmcmc=100,proposal=prop1)
> mcmc3 <- pmcmc(mcmc1,Nmcmc=50)
> mcmc3 <- continue(mcmc3,Nmcmc=50)
> 
> plot(c(mcmc1,mcmc2,mcmc3),pars=c("r","sigma"),density=FALSE)
> plot(c(mcmc1,c(mcmc2,mcmc3)),pars=c("r","sigma"),trace=FALSE)
> plot(conv.rec(c(c(mcmc1,mcmc2),mcmc3),c("r","sigma")))
> print(mcmc1)
<object of class 'pmcmc'>
> c(mcmc1,mcmc2)
An object of class "pmcmcList"
[[1]]
11 records of 1 observables, recorded from t = 0 to 10 
summary of data:
       Y        
 Min.   :0.807  
 1st Qu.:0.957  
 Median :1.080  
 Mean   :1.039  
 3rd Qu.:1.140  
 Max.   :1.176  
zero time, t0 = 0
discrete-time process-model simulator, step.fun = native function '_gompertz_simulator'
process model density, dprocess = not specified
measurement model simulator, rmeasure = native function '_gompertz_normal_rmeasure'
measurement model density, dmeasure = native function '_gompertz_normal_dmeasure'
prior simulator, rprior = not specified
prior density, dprior = native function '__pomp_dprior', defined by a Csnippet
skeleton (map) = native function '_gompertz_skeleton'
initializer = not specified
parameter transformation (to estimation scale) = function (params, ...) 
{
    log(params)
}
<environment: 0x44d7bd8>
parameter transformation (from estimation scale) = function (params, ...) 
{
    exp(params)
}
<environment: 0x44d7bd8>
parameter(s):
     K      r  sigma    tau    X.0 
1.0000 0.0835 0.0142 0.1000 1.0000 

[[2]]
11 records of 1 observables, recorded from t = 0 to 10 
summary of data:
       Y        
 Min.   :0.807  
 1st Qu.:0.957  
 Median :1.080  
 Mean   :1.039  
 3rd Qu.:1.140  
 Max.   :1.176  
zero time, t0 = 0
discrete-time process-model simulator, step.fun = native function '_gompertz_simulator'
process model density, dprocess = not specified
measurement model simulator, rmeasure = native function '_gompertz_normal_rmeasure'
measurement model density, dmeasure = native function '_gompertz_normal_dmeasure'
prior simulator, rprior = not specified
prior density, dprior = native function '_pomp_default_dprior', dynamically loaded from 'pomp'
skeleton (map) = native function '_gompertz_skeleton'
initializer = not specified
parameter transformation (to estimation scale) = function (params, ...) 
{
    log(params)
}
<environment: 0x44d7bd8>
parameter transformation (from estimation scale) = function (params, ...) 
{
    exp(params)
}
<environment: 0x44d7bd8>
parameter(s):
      K       r   sigma     tau     X.0 
 1.0000  0.1720 -0.0584  0.1000  1.0000 

> 
> invisible(pmcmc(mcmc1,start=as.list(coef(mcmc3))))
> try(pmcmc(mcmc1,start=NULL))
Error : in 'pmcmc': 'start' must be specified
> try(pmcmc(mcmc1,start=-7))
Error : in 'pmcmc': 'start' must be a named numeric vector
> try(pmcmc(mcmc1,start="yes"))
Error : in 'pmcmc': 'start' must be a named numeric vector
> try(pmcmc(mcmc1,start=list()))
Error : in 'pmcmc': 'start' must be specified
> try({tmp <- mcmc1; coef(tmp) <- NULL; pmcmc(tmp)})
Error : in 'pmcmc': 'start' must be specified
> try(pmcmc(mcmc1,proposal="random"))
Error : in 'pmcmc': 'proposal' must be a function
> try(pmcmc(mcmc1,proposal=NULL))
Error : in 'pmcmc': 'proposal' must be specified
> try(pmcmc(mcmc1,proposal=function(...)c(3,2)))
Error : in 'pmcmc': 'proposal' must return a named numeric vector
> try(pmcmc(mcmc1,proposal=function(...)c(a=3,b=2,X.0=1)))
Error : in 'pmcmc': in 'pfilter': process simulation error: variable 'r' not found among the parameters
> try(pmcmc(mcmc1,proposal=function(...)stop("oh no!")))
Error : in 'pmcmc': error in proposal function: oh no!
> try({
+   count <- 0
+   delayed.failure <- function (theta, ...) {
+     count <<- count+1
+     if (count>5) stop("no sir!") else theta
+   }
+   pmcmc(mcmc1,proposal=delayed.failure)})
Error : in 'pmcmc': error in proposal function: no sir!
> 
> try(pmcmc(mcmc1,Nmcmc=-20))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=NA))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> try(pmcmc(mcmc1,Nmcmc=c(5,10,15)))
Error : in 'pmcmc': 'Nmcmc' must be a positive integer
> 
> try(pmcmc(mcmc1,dprior=function(params,log,...)stop("not again!")))
Error : in 'pmcmc': 'dprior' error: not again!
> try({
+   count <- 0
+   delayed.failure <- function (params, log, ...) {
+     count <<- count+1
+     if (count>5) stop("uh huh") else 1
+   }
+   pmcmc(mcmc1,dprior=delayed.failure)})
Error : in 'pmcmc': 'dprior' error: uh huh
> 
> capture.output(invisible(pmcmc(mcmc1,Nmcmc=10,verbose=TRUE))) -> out
> stopifnot(sum(grepl("acceptance ratio",out))==10)
> stopifnot(sum(grepl("PMCMC iteration",out))==11)
> 
> dev.off()
null device 
          1 
> 
