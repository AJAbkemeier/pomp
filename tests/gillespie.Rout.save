
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> library(magrittr)
> library(reshape2)
> library(ggplot2)
> 
> c(gamma=24,mu=1/70,iota=0.1,
+   beta1=330,beta2=410,beta3=490,
+   beta.sd=0,
+   rho=0.1,
+   S_0=0.07,I_0=1e-4,R_0=0.93,
+   pop=1000000
+   ) -> params
> 
> rate.fun <- function(j, x, t, params, covars, ...) {
+     switch(
+         j,
+         params["mu"]*x["N"],            # birth
+         params["mu"]*x["S"],            # susceptible death
+         {                               # infection
+             beta <- sum(covars*params[c("beta1","beta2","beta3")])
+             (beta*x["I"]+params["iota"])*x["S"]/x["N"]
+         },
+         params["mu"]*x["I"],            # infected death
+         params["gamma"]*x["I"],         # recovery
+         params["mu"]*x["R"],           # recovered death
+         stop("unrecognized event ",j)
+     )
+ }
> 
> cbind(
+     birth=c(1,0,0,1,0),
+     sdeath=c(-1,0,0,-1,0),
+     infection=c(-1,1,0,0,0),
+     ideath=c(0,-1,0,-1,0),
+     recovery=c(0,-1,1,0,1),
+     rdeath=c(0,0,-1,-1,0)
+ ) -> Vmatrix
> 
> cbind(
+     birth=c(0,0,0,1,0),
+     sdeath=c(1,0,0,0,0),
+     infection=c(1,1,0,1,0),
+     ideath=c(0,1,0,0,0),
+     recovery=c(0,1,0,0,0),
+     rdeath=c(0,0,1,0,0)
+ ) -> Dmatrix
> 
> data.frame(
+     time=seq(from=0,to=2,by=1/52),
+     reports=NA
+ ) %>% 
+     pomp(
+         times="time",
+         t0=0,
+         rprocess=gillespie.sim(rate.fun=rate.fun,v=Vmatrix,d=Dmatrix),
+         zeronames=c("cases"),
+         covar=data.frame(
+             t=seq(0,2,by=1/52/10),
+             seas=periodic.bspline.basis(
+                 seq(0,2,by=1/52/10),
+                 degree=3,period=1,nbasis=3)),
+         tcovar="t",
+         measurement.model=reports~binom(size=cases,prob=rho),
+         initializer=function(params, t0, ...){
+             comp.names <- c("S","I","R")
+             icnames <- paste(comp.names,"0",sep="_")
+             snames <- c("S","I","R","N","cases")
+             fracs <- params[icnames]
+             x0 <- numeric(length(snames))
+             names(x0) <- snames
+             x0["N"] <- params["pop"]
+             x0[comp.names] <- round(params['pop']*fracs/sum(fracs))
+             x0
+         }
+     ) %>%
+     simulate(params=params,seed=806867104L) -> gsir
> 
> pompExample(gillespie.sir)
In 'pomp': the following unrecognized argument(s) will be stored for use by user-defined functions: 'comp.names','ic.names','nbasis','degree','period'
newly created object(s):
 gillespie.sir 
> gsir2 <- simulate(gillespie.sir,params=coef(gsir),
+                   times=time(gsir),t0=timezero(gsir),seed=806867104L)
> 
> tail(as(gsir,"data.frame"))
        time reports     S   I      R       N cases    seas.1     seas.2
100 1.903846       2 53254 115 947043 1000412    59 0.5954581 0.06404093
101 1.923077       6 53470 104 946834 1000408    48 0.6195570 0.07790927
102 1.942308       4 53713  98 946607 1000418    43 0.6393034 0.09510602
103 1.961538       5 53902  89 946383 1000374    48 0.6541212 0.11563116
104 1.980769       4 54126  94 946132 1000352    36 0.6634343 0.13948471
105 2.000000       4 54326  76 945893 1000295    41 0.6666667 0.16666667
       seas.3
100 0.3405010
101 0.3025338
102 0.2655906
103 0.2302477
104 0.1970810
105 0.1666667
> tail(as.data.frame(gsir2))
        time reports     S   I      R       N cases
100 1.903846      14 53194 114 947109 1000417    57
101 1.923077       5 53420 106 946894 1000420    45
102 1.942308       6 53646 101 946664 1000411    44
103 1.961538       3 53843  91 946448 1000382    49
104 1.980769       2 54064  87 946195 1000346    42
105 2.000000       4 54262  74 945960 1000296    40
> 
> list(R=as.data.frame(gsir),
+      C=as.data.frame(gsir2)) %>%
+     melt(id="time") %>%
+     subset(variable=="reports") %>%
+     ggplot(aes(x=time,y=value,color=L1))+
+     labs(color="",y="reports")+
+     geom_line()+
+     theme_bw()+theme(legend.position=c(0.2,0.8)) -> pl1
> 
> freeze(
+     .Call(pomp:::SSA_simulator,
+           func=pomp:::pomp.fun(rate.fun),mflag=0L,
+           xstart=init.state(gsir),times=time(gsir,t0=T),params=as.matrix(coef(gsir)),
+           e=rep(0,5),vmatrix=Vmatrix,dmatrix=Dmatrix,
+           tcovar=gsir@tcovar,covar=gsir@covar,zeronames=gsir@zeronames,
+           args=pairlist(),gsni=FALSE),
+     seed=95424809L) -> exact
> freeze(
+     .Call(pomp:::SSA_simulator,
+           func=pomp:::pomp.fun(rate.fun),mflag=1L,
+           xstart=init.state(gsir),times=time(gsir,t0=T),params=as.matrix(coef(gsir)),
+           e=as.double(rep(0.1,5)),vmatrix=Vmatrix,dmatrix=Dmatrix,
+           tcovar=gsir@tcovar,covar=gsir@covar,zeronames=gsir@zeronames,
+           args=pairlist(),gsni=FALSE),
+     seed=95424809L) -> kleap
> 
> names(dimnames(exact)) <- c("variable","rep","time")
> names(dimnames(kleap)) <- c("variable","rep","time")
> 
> list(exact=exact,`K leap`=kleap) %>%
+     melt() %>%
+     subset(variable=="cases") %>%
+     ggplot(aes(x=time,y=value,group=interaction(rep,L1),color=L1))+
+     labs(color="",y="cases")+
+     geom_line()+
+     theme_bw()+theme(legend.position=c(0.2,0.8)) -> pl2
> 
> ggsave(plot=pl1,filename="gillespie-01.png",dpi=100,height=4,width=4)
> ggsave(plot=pl2,filename="gillespie-02.png",dpi=100,height=4,width=4)
> 
> 
> proc.time()
   user  system elapsed 
  7.148   0.180   7.327 
