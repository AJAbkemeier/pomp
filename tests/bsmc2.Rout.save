
R version 3.3.0 (2016-05-03) -- "Supposedly Educational"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> pdf(file="bsmc2.pdf")
> 
> set.seed(398585L)
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> time(ou2) <- 1:10
> 
> Np <- 50000
> 
> prior.bounds <- rbind(
+                       alpha.2=c(-0.55,-0.45),
+                       alpha.3=c(0.25,0.35)
+                       )
> colnames(prior.bounds) <- c("lower","upper")
> 
> estnames <- rownames(prior.bounds)
> 
> prior <- matrix(data=coef(ou2),nrow=length(coef(ou2)),ncol=Np)
> rownames(prior) <- names(coef(ou2))
> for (n in estnames) {
+   prior[n,] <- runif(n=Np,min=prior.bounds[n,1],max=prior.bounds[n,2])
+ }
> 
> garb <- ou2
> coef(garb) <- numeric(0)
> try(garb <- bsmc2(garb))
Error : 'bsmc2' error: 'params' must be supplied
> 
> ##Run Liu & West particle filter
> smc <- bsmc2(
+     ou2,
+     est="alpha.2",
+     params=prior,
+     smooth=0.02
+ )
> prior <- smc$prior
> post <- smc$post
> 
> smc <- bsmc2(
+              ou2,
+              params=prior,
+              smooth=0.02
+              )
> prior <- smc$prior
> post <- smc$post
> 
> print(
+       cbind(
+             prior.mean=apply(prior,1,mean),
+             posterior.mean=apply(post,1,mean),
+             truth=coef(ou2),
+             t(apply(post,1,quantile,c(0.025,0.5,0.975)))
+             )
+       )
        prior.mean posterior.mean truth       2.5%        50%      97.5%
alpha.1  0.8000000       0.800000   0.8  0.8000000  0.8000000  0.8000000
alpha.2 -0.4999934      -0.504508  -0.5 -0.5481925 -0.5073802 -0.4542522
alpha.3  0.2998071       0.303110   0.3  0.2534805  0.3048255  0.3468498
alpha.4  0.9000000       0.900000   0.9  0.9000000  0.9000000  0.9000000
sigma.1  3.0000000       3.000000   3.0  3.0000000  3.0000000  3.0000000
sigma.2 -0.5000000      -0.500000  -0.5 -0.5000000 -0.5000000 -0.5000000
sigma.3  2.0000000       2.000000   2.0  2.0000000  2.0000000  2.0000000
tau      1.0000000       1.000000   1.0  1.0000000  1.0000000  1.0000000
x1.0    -3.0000000      -3.000000  -3.0 -3.0000000 -3.0000000 -3.0000000
x2.0     4.0000000       4.000000   4.0  4.0000000  4.0000000  4.0000000
> 
> print(min(smc$eff.sample.size))
[1] 3290.482
> print(smc$log.evidence)
[1] -44.41102
> 
> ou2 <- pomp(ou2,
+             rprior=function(params,...){
+               params
+             }
+             )
> 
> capture.output(smc <- bsmc2(ou2,Np=25000,smooth=0.1,est=estnames,
+                             verbose=TRUE)) -> ignore
> print(smc$eff.sample.size)
 [1] 5991.784 4006.889 2997.875 3268.267 5599.638 1948.143 4879.928 1582.434
 [9] 5079.565 3774.104
> print(smc$log.evidence)
[1] -44.38694
> 
> pompExample(ricker)
newly created object(s):
 ricker 
> 
> set.seed(6457673L)
> 
> po <- pomp(
+            ricker,
+            rprior=function (params, ...) {
+              params["r"] <- exp(runif(n=1,min=2,max=5))
+              params["sigma"] <- runif(n=1,min=0.1,max=1)
+              params
+            }
+            )
> 
> Np <- 10000
> 
> fit <- bsmc2(po,Np=100,est=c("r","sigma"),transform=TRUE,smooth=0.2)
> 
> invisible(apply(fit$prior[c("r","sigma"),],1,mean))
> 
> invisible(apply(fit$post[c("r","sigma"),],1,mean))
> 
> invisible(coef(fit))
> 
> plot(fit,thin=300)
> 
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
  2.988   0.100   3.069 
