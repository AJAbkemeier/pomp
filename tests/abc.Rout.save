
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ### OU2 test of abc for pomp
> 
> png(filename="abc-%02d.png",res=100)
> 
> library(pomp)
> library(magrittr)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> set.seed(2079015564L)
> 
> plist <- list(
+   y1.mean=probe.mean(var="y1"),
+   y2.mean=probe.mean(var="y2"),
+   probe.acf(var="y1",lags=c(0,5)),
+   probe.acf(var="y2",lags=c(0,5)),
+   probe.ccf(vars=c("y1","y2"),lags=0)
+ )
> 
> ou2 %>% probe(probes=plist,nsim=100) -> pb
> 
> sqrt(diag(covmat(pb))) -> scale.dat
> 
> ou2 %>%
+   abc(Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+     proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))) -> abc1
> plot(abc1)
> plot(abc1,scatter=TRUE)
> 
> crossprod(
+   array(data=c(0.1,0.02,0,0.1),dim=c(2,2),
+     dimnames=list(c("alpha.1","alpha.2"),c("alpha.1","alpha.2")))
+ ) -> sig
> 
> pb %>% abc(Nabc=100,scale=scale.dat,epsilon=2,proposal=mvn.rw(sig)) -> abc2
> abc2 %>% abc(Nabc=100) -> abc3
> abc1 %>% abc(Nabc=80) %>% continue(Nabc=20) -> abc4
> 
> plot(c(abc1,abc2,abc3,abc4),y="bob")
> plot(c(abc1,abc2,abc3,abc4),scatter=TRUE)
> 
> c(a=c(abc1,abc2),b=abc3) -> abclist
> stopifnot(identical(abclist,c(a1=abc1,c(a2=abc2,b=abc3))))
> stopifnot(all(dim(traces(abc1))==c(101,10)))
> stopifnot(all(dim(traces(abc1,"alpha.1"))==c(101,1)))
> invisible(conv.rec(abc2))
Warning message:
‘conv.rec’ is deprecated and will be removed in a forthcoming release.  Please use ‘traces’ instead. 
> 
> c(abc1,abc2) %>% traces() -> traces
> traces %>% length()
[1] 2
> traces %>% class()
[1] "mcmc.list"
> traces %>% sapply(dim)
     [,1] [,2]
[1,]  101  101
[2,]   10   10
> try(abclist %>% plot(pars="alpha.3",scatter=TRUE))
Error : in ‘plot’: can't make a scatterplot with only one variable.
> 
> abc1 %>%
+   abc(Nabc=500,dprior=Csnippet("
+     lik = dnorm(alpha_1,0.8,1,1)+dnorm(alpha_2,0.2,1,1);
+     lik = (give_log) ? lik : exp(lik);"
+   ),paramnames=c("alpha.1","alpha.2")) -> abc5
> 
> abc1 %>% abc(Nabc=50,params=as.list(coef(ou2))) %>% plot()
> 
> abc4 %>% abc(proposal=function(theta,...)theta) %>% plot()
> 
> try(abc())
Error : in ‘abc’: ‘data’ is a required argument
> try(abc(3))
Error : ‘abc’ is not defined for objects of class ‘numeric’
> 
> try(abc(abc1,Nabc=-5))
Error : in ‘abc’: ‘Nabc’ must be a positive integer.
> stopifnot(all(dim(traces(abc(abc1,Nabc=0))==c(1,10))))
> 
> try(abc(ou2,Nabc=50,scale=scale.dat[1:2],epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘probes’ must be specified.
> try(abc(ou2,Nabc=50,probes=plist,scale=scale.dat[1:2],epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘scale’ must have either length 1 or length equal to the number of probes (here, 7).
> po <- ou2
> coef(po) <- NULL
> try(abc(po,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘params’ must be a named numeric vector.
> try(abc(ou2,params=numeric(0),Nabc=100,probes=plist,scale=scale.dat,
+   epsilon=1.7,proposal="mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))"))
Error : in ‘abc’: ‘params’ must be a named numeric vector.
> try(abc(ou2,params=NULL,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘params’ must be a named numeric vector.
> try(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal="mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))"))
Error : in ‘abc’: ‘proposal’ must be a function.
> try(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=function(...)stop("yikes!")))
Error : in ‘abc’: in proposal function: yikes!
> try(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=function(...)3))
Error : in ‘abc’: ‘proposal’ must return a named numeric vector.
> try(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7))
Error : in ‘abc’: ‘proposal’ must be specified.
> try(abc(ou2,Nabc=100,proposal=function(theta,...)theta,probes="mary",
+   scale=scale.dat,epsilon=1.7))
Error : in ‘abc’: ‘probes’ must be a function or a list of functions.
> try(abc(ou2,Nabc=100,proposal="bob",probes="mary",epsilon=1.7))
Error : in ‘abc’: ‘proposal’ must be a function.
> try(abc(ou2,Nabc=100,probes=plist,epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘scale’ must be specified.
> try(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: abc match criterion, ‘epsilon’, must be specified.
> 
> try(abc(abc1,Nabc=100,epsilon=NULL,scale=scale.dat))
Error : in ‘abc’: abc match criterion, ‘epsilon’, must be specified.
> try(abc(ou2,params=c(1,2,3),Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘params’ must be a named numeric vector.
> try(abc(ou2,Nabc=100,probes="plist[[1]]",scale=scale.dat[1],epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: ‘probes’ must be a function or a list of functions.
> try(abc(ou2,Nabc=100,probes=function(x,y)x+y,scale=scale.dat[1],epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01))))
Error : in ‘abc’: each probe must be a function of a single argument.
> try(abc(abc1,dprior=function(params,log,...)stop("ouch!")))
Error : in ‘abc’: in ‘dprior’: ouch!
> try(abc(abc1,dprior=function(params,log,...)Inf))
Error : in ‘abc’: inadmissible value of ‘dprior’ at starting parameters.
> try(abc(abc1,probes=function(x)stop("piff!")))
Error : in ‘abc’: applying probes to data: piff!
> count <- 0
> delayed.failure <- function (x) {count <<- count+1; if (count>2) stop("paff!") else 1}
> try(abc(abc1,scale=1,probes=delayed.failure))
Error : in ‘abc’: applying probes to simulations: paff!
> try(abc(abc1,proposal=function(...)stop("urp!")))
Error : in ‘abc’: in proposal function: urp!
> count <- 0
> delayed.failure <- function (params,log,...) {count <<- count+1; if (count>5) stop("no sir!") else 1}
> try(abc(abc1,dprior=delayed.failure))
Error : in ‘abc’: in ‘dprior’: no sir!
> count <- 0
> delayed.failure <- function (theta,...) {count <<- count+1; if (count>5) stop("'fraid not!") else theta}
> try(abc(abc1,proposal=delayed.failure))
Error : in ‘abc’: in proposal function: 'fraid not!
> 
> coef(c(abc1,ou2)) -> theta
> stopifnot(dim(theta)==c(10,2),
+   rownames(theta)==c("alpha.1","alpha.2","alpha.3","alpha.4",
+     "sigma.1","sigma.2","sigma.3","tau","x1.0","x2.0"),
+   apply(theta[c("alpha.3","alpha.4",
+     "sigma.1","sigma.2","sigma.3","tau","x1.0","x2.0"),],1,diff)==0,
+   apply(theta[c("alpha.1","alpha.2"),],1,diff) != 0)
> try(c(abc1,NULL))
Error : ‘c’ is not defined for objects of mixed class.
> try(c(c(abc1,abc2),ou2))
Error : ‘c’ is not defined for objects of mixed class.
> c(abc1)
[[1]]
<object of class ‘abcd_pomp’>

> alist <- c(c(abc1,abc2))
> class(alist[2])
[1] "abcList"
attr(,"package")
[1] "pomp"
> try(alist[3])
[[1]]
NULL

> alist <- c(a=abc1,b=abc2)
> alist["b"]
$b
<object of class ‘abcd_pomp’>

> alist["c"]
[[1]]
NULL

> alist[["b"]]
<object of class ‘abcd_pomp’>
> alist[["c"]]
NULL
> c(one=abc1,two=abc2,three=abc3)
$one
<object of class ‘abcd_pomp’>

$two
<object of class ‘abcd_pomp’>

$three
<object of class ‘abcd_pomp’>

> print(c(one=abc1,two=abc2,three=abc3))
$one
<object of class ‘abcd_pomp’>

$two
<object of class ‘abcd_pomp’>

$three
<object of class ‘abcd_pomp’>

> 
> capture.output(abc(ou2,Nabc=100,probes=plist,scale=scale.dat,epsilon=1.7,
+   proposal=mvn.diag.rw(rw.sd=c(alpha.1=0.01,alpha.2=0.01)),
+   verbose=TRUE) -> abc1) -> out
> stopifnot(
+   length(out)==40,
+   sum(grepl("acceptance",out))==20,
+   sum(grepl("ABC iteration",out))==20
+ )
> 
> try(continue())
Error : in ‘continue’: ‘object’ is a required argument
> try(continue(44))
Error : ‘continue’ is not defined for objects of class ‘numeric’
> 
> dev.off()
null device 
          1 
> 
