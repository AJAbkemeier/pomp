
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> set.seed(1178744046L)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> dprior.ou2 <- function (params, log, ...) {
+   f <- sum(dunif(params,min=coef(ou2)-1,max=coef(ou2)+1,log=TRUE))
+   if (log) f else exp(f)
+ }
> 
> pdf(file="ou2-pmcmc.pdf")
> 
> f1 <- pmcmc(
+             pomp(ou2,dprior=dprior.ou2),
+             Nmcmc=20,
+             proposal=mvn.diag.rw(c(alpha.2=0.001,alpha.3=0.001)),
+             Np=100,
+             verbose=FALSE
+             )
> f1 <- continue(f1,Nmcmc=20)
> plot(f1)
> 
> ff <- pfilter(f1)
> f2 <- pmcmc(
+             ff,
+             Nmcmc=20,
+             proposal=mvn.diag.rw(c(alpha.2=0.01,alpha.3=0.01)),
+             max.fail=100, 
+             verbose=FALSE
+             )
> 
> f3 <- pmcmc(f2)
> f4 <- continue(f3,Nmcmc=20)
> filter.traj(f4)[,40,95:100]
        time
variable        94         95        96        97        98        99
      x1  1.855673 -0.3164115  2.548962  3.104878 -1.829905 -5.273791
      x2 -4.491955 -2.7773696 -6.574778 -4.857627 -8.930757 -5.031346
> 
> plot(c(f2,f3))
> 
> try(ff <- c(f3,f4))
Error in validObject(.Object) : 
  invalid class "pmcmcList" object: error in 'c': to be combined, 'pmcmc' objects must have chains of equal length
> 
> if (Sys.getenv("POMP_FULL_TESTS")=="yes") {
+   f2a <- pmcmc(f1,Nmcmc=1000,Np=100,verbose=FALSE)
+   plot(f2a)
+   runs <- rle(as.numeric(conv.rec(f2a,'loglik')))$lengths
+   plot(sort(runs))
+   acf(conv.rec(f2a,c("alpha.2","alpha.3")))
+ }
> 
> f5 <- pmcmc(
+             pomp(ou2,
+                  dprior=function (params, log, ...) {
+                    f <- sum(dnorm(params,mean=coef(ou2),sd=1,log=TRUE))
+                    if (log) f else exp(f)
+                  }
+                  ),
+             Nmcmc=20,
+             proposal=mvn.diag.rw(c(alpha.2=0.001,alpha.3=0.001)),
+             Np=100,
+             verbose=FALSE
+             )
> f6 <- continue(f5,Nmcmc=20)
> plot(f6)
> 
> ff <- c(f4,f6)
> plot(ff)
> plot(conv.rec(ff,c("alpha.2","alpha.3","loglik")))
> 
> ff <- c(f2,f3)
> 
> try(ff <- c(ff,f4,f6))
Error in validObject(.Object) : 
  invalid class "pmcmcList" object: error in 'c': to be combined, 'pmcmc' objects must have chains of equal length
> try(ff <- c(f4,ou2))
Error in c(f4, ou2) : cannot mix 'pmcmc' and non-'pmcmc' objects
> try(ff <- c(ff,ou2))
Error in c(ff, ou2) : cannot mix 'pmcmc' and non-'pmcmc' objects
> 
> plot(ff <- c(ff,f5))
> plot(conv.rec(c(f2,ff),c("alpha.2","alpha.3")))
> plot(conv.rec(ff[2],c("alpha.2")))
> plot(conv.rec(ff[2:3],c("alpha.3")))
> plot(window(conv.rec(ff[2:3],c("alpha.3")),thin=3,start=2))
> plot(conv.rec(ff[[3]],c("alpha.3")))
> 
> sig <- array(data=c(0.1,-0.1,0,0.01),
+              dim=c(2,2),
+              dimnames=list(
+                c("alpha.2","alpha.3"),
+                c("alpha.2","alpha.3")))
> sig <- crossprod(sig)
> 
> f7 <- pmcmc(
+             pomp(ou2,
+                  dprior=function (params, log, ...) {
+                    f <- sum(dnorm(params,mean=coef(ou2),sd=1,log=TRUE))
+                    if (log) f else exp(f)
+                  }
+                  ),
+             Nmcmc=30,
+             proposal=mvn.rw(sig),
+             Np=100,
+             verbose=FALSE
+             )
> plot(f7)
> filter.traj(f7,"x1")[1,30,1:5]
          0           1           2           3           4 
-3.00000000 -0.07848356  1.00259137  3.81840027  5.64324143 
> 
> f8 <- pmcmc(
+             pomp(ou2,dprior=function (params, log, ...) {
+               f <- sum(dnorm(params,mean=coef(ou2),sd=1,log=TRUE))
+               if (log) f else exp(f)
+             }),
+             Nmcmc=1000,Np=500,verbose=FALSE,
+             proposal=mvn.rw.adaptive(rw.sd=c(alpha.2=0.01,alpha.3=0.01),
+               scale.start=100,shape.start=100))
> f8 <- continue(f8,Nmcmc=500,verbose=FALSE)
> plot(f8)
> require(coda)
Loading required package: coda
> trace <- window(conv.rec(f8,c("alpha.2","alpha.3")),start=500)
> rejectionRate(trace)
  alpha.2   alpha.3 
0.9100899 0.9100899 
> effectiveSize(trace)
 alpha.2  alpha.3 
13.93905 45.84404 
> autocorr.diag(trace)
         alpha.2   alpha.3
Lag 0  1.0000000 1.0000000
Lag 1  0.9216697 0.8633038
Lag 5  0.7203876 0.4632027
Lag 10 0.6370753 0.2740626
Lag 50 0.3156442 0.2527065
> trace <- window(trace,thin=50)
> plot(trace)
> heidel.diag(trace)
                                      
        Stationarity start     p-value
        test         iteration        
alpha.2 passed       6         0.2099 
alpha.3 passed       8         0.0776 
                                  
        Halfwidth Mean   Halfwidth
        test                      
alpha.2 passed    -0.558 0.0136   
alpha.3 passed     0.264 0.0207   
> geweke.diag(trace)

Fraction in 1st window = 0.1
Fraction in 2nd window = 0.5 

alpha.2 alpha.3 
  2.774   2.240 

> 
> dev.off()
null device 
          1 
> 
> proc.time()
   user  system elapsed 
 30.425   0.040  30.482 
