
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> set.seed(58668844L)
> 
> library(pomp)

Welcome to pomp!

As of version 4.6, no user-visible pomp function has a name that
includes a dot ('.'). Function names have been changed to replace the
dot with an underscore ('_'). For more information, see the pomp blog:
https://kingaa.github.io/pomp/blog.html.

> 
> simulate(times=seq(1,100),t0=0,
+   nbasis=9L,
+   period=50.0,
+   msg="hello!",
+   params=setNames(runif(n=9,min=-5,max=5),sprintf("beta%d",1:9)),
+   rprocess=euler(
+     Csnippet(r"{
+       static int first = 1;
+       if (first) {
+         SEXP Msg = get_userdata("msg");
+         char *msg = CHAR(STRING_ELT(Msg,0));
+         Rprintf("%s\n",msg);
+         first = 0;
+       }
+       int nbasis = *(get_userdata_int("nbasis"));
+       int degree = 3;
+       double period = *(get_userdata_double("period"));
+       double dxdt[nbasis];
+       periodic_bspline_basis_eval(t,period,degree,nbasis,dxdt);
+       x += dt*dot_product(nbasis,dxdt,&beta1);}"
+     ),delta.t=0.01
+   ),
+   rmeasure=Csnippet("y = x;"),
+   rinit=Csnippet("x = 0;"),
+   statenames="x",obsnames="y",paramnames=c("beta1","beta2","beta3")
+ ) -> po
NOTE: The provided objects 'nbasis','period','msg' are available for use by POMP basic components.
hello!
> 
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{
+       SEXP Msg = get_userdata("bob");
+       char *msg = CHAR(STRING_ELT(Msg,0));
+       Rprintf("%s\n",msg);}"))))
Error : in 'simulate': no user-data element 'bob' is found.
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{double nbasis = *(get_userdata_double("nbasis"));}"))))
Error : in 'simulate': user-data element 'nbasis' is not a numeric vector.
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{double nbasis = *(get_userdata_double("bob"));}"))))
Error : in 'simulate': no user-data element 'bob' is found.
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{int nbasis = *(get_userdata_int("period"));}"))))
Error : in 'simulate': user-data element 'period' is not an integer.
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{int nbasis = *(get_userdata_int("bob"));}"))))
Error : in 'simulate': no user-data element 'bob' is found.
> try(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{int nbasis = *(get_userdata_int("bob"));}")),
+       bob=3))
NOTE: The provided object 'bob' is available for use by POMP basic components.
Error : in 'simulate': user-data element 'bob' is not an integer.
> stopifnot(po |>
+     simulate(rprocess=onestep(
+       Csnippet(r"{int nbasis = *(get_userdata_int("bob"));}")),
+       bob=3L) |> class() == "pomp")
NOTE: The provided object 'bob' is available for use by POMP basic components.
> 
