
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> options(digits=3)
> png(filename="mif2-%02d.png",res=100)
> 
> set.seed(857075216L)
> 
> library(pomp)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(reshape2)
> library(magrittr)
> 
> pompExample(gompertz,envir=NULL) -> po
> po[[1]] %>% window(end=10) -> po
> 
> mif2(po,Nmif=50,Np=100,cooling.fraction.50=0.5,
+   rw.sd=rw.sd(sigma=0.02,K=0.02,r=0.02)) -> mf1
> mif2(po,Nmif=50,Np=100,cooling.fraction.50=0.5,
+   rw.sd=rw.sd(sigma=0.02,K=0.02,r=0.02)) -> mf2
> plot(mf1)
> plot(c(a=mf1,b=mf2) -> mfl,y=NA)
> c(a=mf1,b=c(mf1,mf2))
$a
<object of class ‘mif2d_pomp’>

$b1
<object of class ‘mif2d_pomp’>

$b2
<object of class ‘mif2d_pomp’>

> mfl[1]
$a
<object of class ‘mif2d_pomp’>

> mfl["b"]
$b
<object of class ‘mif2d_pomp’>

> mfl[5]
[[1]]
NULL

> traces(mfl) %>% melt() %>%
+   filter(variable %in% c("sigma","K","r")) %>%
+   group_by(L1,variable) %>%
+   filter(value==max(value)) %>%
+   ungroup() %>%
+   as.data.frame()
  iteration variable value L1
1        30        K 1.280  a
2        50        r 0.138  a
3         2    sigma 0.101  a
4        25        K 1.319  b
5        24        r 0.109  b
6         1    sigma 0.102  b
> coef(mfl)
           a      b
K     1.0974 1.1471
r     0.1383 0.1042
sigma 0.0581 0.0587
tau   0.1000 0.1000
X.0   1.0000 1.0000
> 
> mfl %>%
+   traces(transform=TRUE,pars=c("r","sigma")) %>%
+   melt() %>%
+   filter(iteration==50) %>%
+   as.data.frame()
  iteration variable value L1
1        50        r  1.15  a
2        50    sigma  1.06  a
3        50        r  1.11  b
4        50    sigma  1.06  b
> 
> try(mfl %>% traces(pars="bob"))
Error : in ‘traces’: parameter ‘bob’ not found.
> 
> try(mif2(po,Nmif=NA,Np=100))
Error : in ‘mif2’: ‘Nmif’ must be a positive integer.
> try(mif2(po,Nmif=NULL,Np=100))
Error : in ‘mif2’: ‘Nmif’ must be a positive integer.
> try(mif2(po,Nmif=-10,Np=100))
Error : in ‘mif2’: ‘Nmif’ must be a positive integer.
> try(mif2(po,Nmif=c(10,20),Np=100))
Error : in ‘mif2’: ‘Nmif’ must be a positive integer.
> try(mif2(po,Nmif=1,Np=function(k)c(10,20)))
Error : in ‘mif2’: if ‘Np’ is a function, it must return a single positive integer.
> try(mif2(po,Nmif=1,Np="bob"))
Error : in ‘mif2’: ‘Np’ must be a number, a vector of numbers, or a function.
> try(mif2(po,Nmif=list(),Np=100))
Error : in ‘mif2’: ‘Nmif’ must be a positive integer.
> try(mif2(po,Nmif=1,Np=Inf))
Error : in ‘mif2’: number of particles, ‘Np’, must be a positive integer.
> try(mif2(po,Nmif=1,Np=100))
Error : in ‘mif2’: ‘rw.sd’ must be specified!
> try(mif2(po,Nmif=1,Np=NULL))
Error : in ‘mif2’: ‘Np’ must be specified.
> try(mif2(po,Nmif=1,Np=c(3,4)))
Error : in ‘mif2’: ‘Np’ must have length 1 or ‘length(time(object))’.
> mif2(po,Nmif=1,Np=c(rep(100,11),40),rw.sd=rw.sd(sigma=0.1),cooling.frac=0.5)
<object of class ‘mif2d_pomp’>
Warning message:
in ‘mif2’: Np[k] ignored for k > ‘length(time(object))’. 
> try(mif2(po,Nmif=1,Np=100,rw.sd=3))
Error : in ‘mif2’: ‘rw.sd’ should be specified using the ‘rw.sd’ function. See ‘?mif2’.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd()))
Error : in ‘mif2’: in ‘rw.sd’: parameters must be referenced by name.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(a=9)))
Error : in ‘mif2’: the following parameter(s), given random walks in ‘rw.sd’, are not present in ‘start’: ‘a’
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=1:1000)))
Error : in ‘mif2’: ‘rw.sd’ spec for parameter ‘sigma’ does not evaluate to a vector of the correct length (‘length(time(object))’=11).
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘mif2’: ‘cooling.fraction.50’ is a required argument.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(NULL)))
Error : in ‘mif2’: in ‘rw.sd’: parameters must be referenced by name.
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1),cooling.fraction.50=12))
Error : in ‘mif2’: ‘cooling.fraction.50’ must be in (0,1]
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1),cooling.fraction.50=NA))
Error : in ‘mif2’: ‘cooling.fraction.50’ must be in (0,1]
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1),cooling.fraction.50=c(0.1,1)))
Error : in ‘mif2’: ‘cooling.fraction.50’ must be in (0,1]
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1),cooling.fraction.50=NULL))
Error : in ‘mif2’: ‘cooling.fraction.50’ must be in (0,1]
> try(mif2(po,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1),cooling.fraction.50=0.1,
+   cooling.type="geometric",tol=-3))
Error : in ‘mif2’: in ‘mif2.pfilter’: ‘tol’ should be a small positive number.
> try(mif2(po,params=NULL,Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘mif2’: the following parameter(s), given random walks in ‘rw.sd’, are not present in ‘start’: ‘sigma’
> try(mif2(po,params=list(),Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘mif2’: the following parameter(s), given random walks in ‘rw.sd’, are not present in ‘start’: ‘sigma’
> try(mif2(po,params=list(NULL),Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘pomp’: (list) object cannot be coerced to type 'double'
> try(mif2(po,params=c(3,2,1),Nmif=1,Np=100,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘pomp’: ‘params’ must be a named numeric vector.
> try(mif2(po,Nmif=1,Np=100:1000,rw.sd=rw.sd(sigma=0.1)))
Error : in ‘mif2’: ‘cooling.fraction.50’ is a required argument.
In addition: Warning message:
in ‘mif2’: Np[k] ignored for k > ‘length(time(object))’. 
> mif2(po,Nmif=2,Np=50,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+   cooling.fraction.50=0.1,cooling.type="geometric",tol=1e-10,
+   params=as.list(coef(po)))
<object of class ‘mif2d_pomp’>
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+   cooling.fraction.50=0.1,rprocess=onestep.sim(function(x,t,params,covars,delta.t,...)stop("boink"))))
Error : in ‘mif2’: in ‘mif2.pfilter’: process simulation error: in ‘rprocess’: boink
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+   cooling.fraction.50=0.1,dmeasure=function(y,x,t,params,covars,log,...)stop("blop")))
Error : in ‘mif2’: in ‘mif2.pfilter’: in ‘dmeasure’: blop
> try(mif2(po,Nmif=2,Np=100,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+   cooling.fraction.50=0.1,dmeasure=function(y,x,t,params,covars,log,...)NA))
Error : in ‘mif2’: in ‘mif2.pfilter’: ‘dmeasure’ returns non-finite value.
likelihood, data, states, and parameters are:
 time:            0
  lik:           NA
    Y:      1.07953
    X:     0.996592
    K:            1
    r:          0.1
sigma:     0.100133
  tau:          0.1
  X.0:     0.996592
> mif2(po,Nmif=2,Np=50,rw.sd=rw.sd(sigma=0.01),cooling.fraction.50=0.1,
+   drpocess="oops",
+   dmeasure=function(t,x,y,params,log,...)0) -> mf3
in ‘pomp’: the unrecognized argument ‘drpocess’ is available for use by the POMP basic components.
Warning messages:
1: in ‘mif2.pfilter’: filtering failure at last filter iteration; using unweighted mean for point estimate. 
2: in ‘mif2.pfilter’: 11 filtering failures occurred. 
3: in ‘mif2.pfilter’: filtering failure at last filter iteration; using unweighted mean for point estimate. 
4: in ‘mif2.pfilter’: 11 filtering failures occurred. 
> try(mif2(mf3,max.fail=1))
Error : in ‘mif2’: in ‘mif2.pfilter’: too many filtering failures
> 
> theta <- coef(po)
> theta["sigma"] <- 0.2
> po %>%
+   pfilter(Np=100,params=theta) %>%
+   mif2(Nmif=3,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+     cooling.fraction.50=0.5) %>%
+   mif2() %>% continue(Nmif=3,cooling.fraction.50=0.1) %>% plot()
> 
> capture.output(
+   mif2(po,Nmif=2,Np=100,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+     cooling.fraction.50=1,cooling.type="hyperbolic",tol=1e-10,
+     params=as.list(coef(po)),verbose=TRUE),
+   type="output"
+ ) -> out
> stopifnot(sum(grepl("mif2 pfilter timestep",out))==4,
+   sum(grepl("mif2 iteration",out))==2)
> capture.output(
+   mif2(po,Nmif=2,Np=100,rw.sd=rw.sd(sigma=0.01,X.0=ivp(0.01)),
+     cooling.fraction.50=1,cooling.type="hyperbolic",tol=10,
+     params=as.list(coef(po)),verbose=TRUE),
+   type="message"
+ ) -> out
mif2 pfilter timestep 5 of 11 finished
mif2 pfilter timestep 10 of 11 finished
mif2 iteration 1 of 2 completed
mif2 pfilter timestep 5 of 11 finished
mif2 pfilter timestep 10 of 11 finished
mif2 iteration 2 of 2 completed
<object of class ‘mif2d_pomp’>
Warning messages:
1: in ‘mif2.pfilter’: 11 filtering failures occurred. 
2: in ‘mif2.pfilter’: 11 filtering failures occurred. 
> stopifnot(sum(grepl("filtering failure at time",out))==22)
> 
> dev.off()
null device 
          1 
> 
