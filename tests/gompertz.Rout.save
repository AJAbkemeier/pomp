
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> library(reshape2)
> library(magrittr)
> 
> options(digits=3)
> 
> try(pompExample(gompertz,envir=3))
Error : in ‘pompExample’: ‘envir’ must be an environment or NULL
> pompExample(gompertz)
newly created object(s):
 gompertz 
> show(gompertz)
101 records of 1 observables, recorded from t = 0 to 100 
summary of data:
       Y        
 Min.   :0.609  
 1st Qu.:0.918  
 Median :1.136  
 Mean   :1.133  
 3rd Qu.:1.297  
 Max.   :1.880  
zero time, t0 = 0
process model simulator, rprocess = 
function (xstart, times, params, ..., zeronames = character(0), 
    tcovar, covar, .getnativesymbolinfo = TRUE) 
{
    tryCatch(.Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = object@delta.t, 
        method = 2L, zeronames = zeronames, tcovar = tcovar, 
        covar = covar, args = pairlist(...), gnsi = .getnativesymbolinfo), 
        error = function(e) {
            stop(ep, conditionMessage(e), call. = FALSE)
        })
}
<environment: 0x3787398>
process model density, dprocess = 
function (x, times, params, log = FALSE, ...) 
stop(sQuote("dprocess"), " not specified", call. = FALSE)
<environment: 0x37272d0>
measurement model simulator, rmeasure = 
native function ‘_gompertz_normal_rmeasure’
measurement model density, dmeasure = 
native function ‘_gompertz_normal_dmeasure’
prior simulator, rprior = 
function not specified
prior density, dprior = 
native function ‘_pomp_default_dprior’, dynamically loaded from ‘pomp’
skeleton (map) = 
native function ‘_gompertz_skeleton’
initializer = 
function not specified
parameter transformation (to estimation scale) = 
function (params, ...) 
{
    log(params)
}
<environment: 0x36d4e40>
parameter transformation (from estimation scale) = 
function (params, ...) 
{
    exp(params)
}
<environment: 0x36d4e40>
parameter(s):
    K     r sigma   tau   X.0 
  1.0   0.1   0.1   0.1   1.0 
> print(gompertz@rmeasure)
native function ‘_gompertz_normal_rmeasure’
> print(gompertz@dmeasure)
native function ‘_gompertz_normal_dmeasure’
> print(gompertz@rprocess)
function (xstart, times, params, ..., zeronames = character(0), 
    tcovar, covar, .getnativesymbolinfo = TRUE) 
{
    tryCatch(.Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = object@delta.t, 
        method = 2L, zeronames = zeronames, tcovar = tcovar, 
        covar = covar, args = pairlist(...), gnsi = .getnativesymbolinfo), 
        error = function(e) {
            stop(ep, conditionMessage(e), call. = FALSE)
        })
}
<environment: 0x3787398>
> 
> po <- gompertz
> coef(po)
    K     r sigma   tau   X.0 
  1.0   0.1   0.1   0.1   1.0 
> coef(po,transform=TRUE)
    K     r sigma   tau   X.0 
  0.0  -2.3  -2.3  -2.3   0.0 
> coef(po,c("r","X.0"))
  r X.0 
0.1 1.0 
> coef(po,c("r","X.0"),transform=TRUE)
   r  X.0 
-2.3  0.0 
> coef(po,c("r","K")) <- c(0.2,1)
> coef(po)
    K     r sigma   tau   X.0 
  1.0   0.2   0.1   0.1   1.0 
> coef(po,transform=TRUE)
    K     r sigma   tau   X.0 
 0.00 -1.61 -2.30 -2.30  0.00 
> guess <- coef(po)
> coef(po) <- numeric(0)
> coef(po,transform=TRUE) <- partrans(po,guess,dir='to')
> coef(po) <- numeric(0)
> coef(po,c("K","r","sigma","tau","X.0"),
+      transform=TRUE) <- partrans(po,guess,dir='to')
Warning message:
in ‘coef<-’:  names of ‘value’ are being discarded 
> coef(po) <- numeric(0)
> coef(po,c("K","r","sigma","tau","X.0")) <- unname(guess)
> coef(po) <- numeric(0)
> coef(po) <- guess
> guess["r"] <- 0
> 
> set.seed(5868684L)
> simulate(gompertz,states=TRUE,obs=TRUE) %>% melt() %>% head()
  variable rep time value     L1
1        X   1    1 1.000 states
2        X   1    2 0.957 states
3        X   1    3 0.991 states
4        X   1    4 1.030 states
5        X   1    5 1.033 states
6        X   1    6 1.115 states
> pfilter(gompertz,Np=1000) -> pf
> round(logLik(pf))
[1] 32
> round(pf$loglik)
[1] 32
> trajectory(gompertz) %>% melt() %>% head()
  variable rep time value
1        X   1    1     1
2        X   1    2     1
3        X   1    3     1
4        X   1    4     1
5        X   1    5     1
6        X   1    6     1
> 
> try(
+     mf <- mif(
+         po,
+         start=guess,
+         Nmif=5,Np=1000,
+         transform=TRUE,
+         ic.lag=1,var.factor=1,
+         cooling.fraction=0.99^50,
+         rw.sd=c(r=0.02,K=0.02)
+     )
+ )
Error : in ‘mif’: ‘mif’ cannot estimate non-finite parameters.
The following transformed parameters are non-finite: ‘r’
> 
> set.seed(93848585L)
> mf <- mif(
+           po,
+           Nmif=5,Np=1000,
+           transform=TRUE,
+           ic.lag=1,var.factor=1,
+           cooling.fraction=0.99^50,
+           rw.sd=c(r=0.02,K=0.02)
+           )
> coef(mf,transform=TRUE)
      K       r   sigma     tau     X.0 
 0.0467 -1.6134 -2.3026 -2.3026  0.0000 
> coef(mf)
    K     r sigma   tau   X.0 
1.048 0.199 0.100 0.100 1.000 
> conv.rec(mf)
         variable
iteration loglik nfail      K     r sigma  tau X.0
        0   30.3     0 0.0000 -1.61  -2.3 -2.3   0
        1   30.6     0 0.0105 -1.61  -2.3 -2.3   0
        2   31.0     0 0.0238 -1.61  -2.3 -2.3   0
        3   29.8     0 0.0316 -1.61  -2.3 -2.3   0
        4   31.2     0 0.0379 -1.61  -2.3 -2.3   0
        5     NA    NA 0.0467 -1.61  -2.3 -2.3   0
> conv.rec(mf,transform=TRUE)
     K     r sigma tau X.0 loglik nfail
0 1.00 0.200   0.1 0.1   1   30.3     0
1 1.01 0.200   0.1 0.1   1   30.6     0
2 1.02 0.200   0.1 0.1   1   31.0     0
3 1.03 0.201   0.1 0.1   1   29.8     0
4 1.04 0.200   0.1 0.1   1   31.2     0
5 1.05 0.199   0.1 0.1   1     NA    NA
> conv.rec(mf,c("loglik","r"))
         variable
iteration loglik     r
        0   30.3 -1.61
        1   30.6 -1.61
        2   31.0 -1.61
        3   29.8 -1.61
        4   31.2 -1.61
        5     NA -1.61
> try(conv.rec(mf,c("loglik","r"),transform=FALSE))
         variable
iteration loglik     r
        0   30.3 -1.61
        1   30.6 -1.61
        2   31.0 -1.61
        3   29.8 -1.61
        4   31.2 -1.61
        5     NA -1.61
> try(conv.rec(mf,c("loglik","r"),transform=TRUE))
  loglik     r
0   30.3 0.200
1   30.6 0.200
2   31.0 0.200
3   29.8 0.201
4   31.2 0.200
5     NA 0.199
> conv.rec(mf,c("loglik","r"),transform=TRUE)
  loglik     r
0   30.3 0.200
1   30.6 0.200
2   31.0 0.200
3   29.8 0.201
4   31.2 0.200
5     NA 0.199
> conv.rec(mf,c("loglik"),transform=TRUE)
   0    1    2    3    4    5 
30.3 30.6 31.0 29.8 31.2   NA 
> conv.rec(mf,c("K"),transform=TRUE)
   0    1    2    3    4    5 
1.00 1.01 1.02 1.03 1.04 1.05 
> 
> gg <- pomp(gompertz,skeleton=map(function(x,t,params,...){
+   xx <- x["X"]*exp(params["r"]*(1-x["X"]/params["K"]))
+   c(X=unname(xx))
+ }))
> coef(gg,c("X.0","r")) <- c(1.5,3)
> trajectory(gg,as.data.frame=TRUE,times=seq(0,10))
        X time traj
1  1.5000    0    1
2  0.3347    1    1
3  2.4630    2    1
4  0.0306    3    1
5  0.5603    4    1
6  2.0956    5    1
7  0.0783    6    1
8  1.2436    7    1
9  0.5988    8    1
10 1.9953    9    1
11 0.1008   10    1
> 
